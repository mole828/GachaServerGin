package implements

import (
	"GachaServerGin/src"
	"encoding/json"
	"strings"
	"testing"
)

func TestString(t *testing.T) {
	data := []byte{123, 34, 83, 117, 109, 109, 97, 114, 121, 34, 58, 123, 125, 44, 34, 80, 111, 111, 108, 115, 34, 58, 123, 34, 228, 184, 135, 232, 177, 161, 228, 188, 182, 228, 187, 131, 34, 58, 123, 34, 50, 34, 58, 52, 48, 44, 34, 51, 34, 58, 54, 51, 44, 34, 52, 34, 58, 49, 48, 44, 34, 53, 34, 58, 51, 125, 44, 34, 228, 184, 141, 229, 141, 143, 229, 146, 140, 233, 159, 179, 231, 168, 139, 34, 58, 123, 34, 50, 34, 58, 53, 53, 44, 34, 51, 34, 58, 52, 53, 44, 34, 52, 34, 58, 49, 49, 44, 34, 53, 34, 58, 51, 125, 44, 34, 228, 186, 145, 233, 151, 180, 230, 184, 133, 233, 134, 146, 230, 162, 166, 34, 58, 123, 34, 50, 34, 58, 51, 56, 44, 34, 51, 34, 58, 52, 49, 44, 34, 52, 34, 58, 54, 44, 34, 53, 34, 58, 50, 125, 44, 34, 229, 165, 148, 229, 180, 150, 230, 128, 146, 229, 143, 183, 34, 58, 123, 34, 50, 34, 58, 51, 50, 44, 34, 51, 34, 58, 52, 51, 44, 34, 52, 34, 58, 49, 48, 44, 34, 53, 34, 58, 51, 125, 44, 34, 229, 176, 132, 232, 144, 189, 231, 129, 190, 229, 188, 130, 231, 154, 132, 233, 163, 142, 230, 154, 180, 34, 58, 123, 34, 50, 34, 58, 53, 51, 44, 34, 51, 34, 58, 57, 49, 44, 34, 52, 34, 58, 49, 51, 44, 34, 53, 34, 58, 52, 125, 44, 34, 229, 183, 168, 230, 150, 167, 228, 184, 142, 231, 172, 148, 229, 176, 150, 34, 58, 123, 34, 50, 34, 58, 56, 52, 44, 34, 51, 34, 58, 57, 48, 44, 34, 52, 34, 58, 49, 51, 44, 34, 53, 34, 58, 55, 125, 44, 34, 229, 184, 184, 233, 169, 187, 230, 160, 135, 229, 135, 134, 229, 175, 187, 232, 174, 191, 34, 58, 123, 34, 51, 34, 58, 49, 125, 44, 34, 230, 137, 167, 232, 163, 129, 232, 128, 133, 34, 58, 123, 34, 50, 34, 58, 49, 51, 44, 34, 51, 34, 58, 49, 53, 44, 34, 52, 34, 58, 50, 44, 34, 53, 34, 58, 50, 125, 44, 34, 230, 150, 169, 232, 141, 134, 232, 190, 159, 232, 183, 175, 34, 58, 123, 34, 50, 34, 58, 56, 50, 44, 34, 51, 34, 58, 49, 49, 53, 44, 34, 52, 34, 58, 49, 50, 44, 34, 53, 34, 58, 53, 125, 44, 34, 230, 152, 165, 230, 177, 159, 233, 128, 162, 233, 155, 170, 34, 58, 123, 34, 50, 34, 58, 53, 53, 44, 34, 51, 34, 58, 54, 54, 44, 34, 52, 34, 58, 49, 52, 44, 34, 53, 34, 58, 50, 125, 44, 34, 230, 156, 170, 230, 155, 190, 232, 181, 183, 232, 170, 147, 34, 58, 123, 34, 50, 34, 58, 49, 51, 44, 34, 51, 34, 58, 49, 56, 44, 34, 52, 34, 58, 53, 44, 34, 53, 34, 58, 50, 125, 44, 34, 230, 156, 170, 231, 159, 165, 229, 175, 187, 232, 174, 191, 34, 58, 123, 34, 50, 34, 58, 49, 56, 56, 44, 34, 51, 34, 58, 50, 52, 54, 44, 34, 52, 34, 58, 52, 51, 44, 34, 53, 34, 58, 49, 50, 125, 44, 34, 230, 158, 175, 231, 132, 176, 231, 148, 159, 232, 138, 177, 34, 58, 123, 34, 50, 34, 58, 50, 55, 44, 34, 51, 34, 58, 52, 50, 44, 34, 52, 34, 58, 56, 44, 34, 53, 34, 58, 51, 125, 44, 34, 230, 178, 153, 230, 180, 178, 229, 188, 149, 232, 183, 175, 228, 186, 186, 34, 58, 123, 34, 50, 34, 58, 55, 55, 44, 34, 51, 34, 58, 49, 49, 55, 44, 34, 52, 34, 58, 50, 48, 44, 34, 53, 34, 58, 52, 125, 44, 34, 230, 181, 138, 233, 133, 146, 230, 190, 132, 229, 191, 131, 34, 58, 123, 34, 50, 34, 58, 52, 48, 44, 34, 51, 34, 58, 52, 50, 44, 34, 52, 34, 58, 49, 48, 44, 34, 53, 34, 58, 51, 125, 44, 34, 230, 181, 183, 232, 154, 128, 34, 58, 123, 34, 50, 34, 58, 51, 48, 44, 34, 51, 34, 58, 51, 57, 44, 34, 52, 34, 58, 54, 44, 34, 53, 34, 58, 53, 125, 44, 34, 231, 129, 171, 232, 138, 177, 231, 187, 189, 230, 148, 190, 34, 58, 123, 34, 50, 34, 58, 49, 53, 44, 34, 51, 34, 58, 49, 57, 44, 34, 52, 34, 58, 53, 44, 34, 53, 34, 58, 50, 125, 44, 34, 231, 130, 189, 231, 132, 176, 230, 151, 160, 233, 156, 190, 34, 58, 123, 34, 50, 34, 58, 49, 55, 44, 34, 51, 34, 58, 50, 51, 44, 34, 52, 34, 58, 50, 44, 34, 53, 34, 58, 49, 125, 44, 34, 231, 138, 185, 229, 156, 168, 229, 189, 177, 228, 184, 173, 34, 58, 123, 34, 50, 34, 58, 50, 53, 44, 34, 51, 34, 58, 50, 56, 44, 34, 52, 34, 58, 55, 44, 34, 53, 34, 58, 50, 125, 44, 34, 231, 156, 159, 231, 144, 134, 229, 173, 145, 231, 132, 182, 34, 58, 123, 34, 50, 34, 58, 49, 55, 44, 34, 51, 34, 58, 50, 53, 44, 34, 52, 34, 58, 53, 44, 34, 53, 34, 58, 50, 125, 44, 34, 231, 160, 186, 231, 129, 171, 230, 136, 144, 233, 148, 139, 34, 58, 123, 34, 50, 34, 58, 49, 49, 44, 34, 51, 34, 58, 49, 52, 44, 34, 52, 34, 58, 54, 44, 34, 53, 34, 58, 49, 125, 44, 34, 232, 189, 180, 230, 137, 191, 228, 184, 142, 231, 129, 171, 230, 152, 159, 34, 58, 123, 34, 50, 34, 58, 49, 51, 44, 34, 51, 34, 58, 49, 55, 44, 34, 52, 34, 58, 52, 44, 34, 53, 34, 58, 49, 125, 44, 34, 233, 155, 170, 232, 158, 141, 228, 185, 139, 232, 175, 186, 34, 58, 123, 34, 50, 34, 58, 53, 44, 34, 51, 34, 58, 50, 44, 34, 52, 34, 58, 49, 125, 125, 125}
	text := string(data)
	if false {
		println(text)
	} else {
		i := 0
		for {
			sub := text[i*20 : (i+1)*20]
			println(i, sub)
			i++
			if (i+1)*20 > len(text) {
				break
			}
		}
	}
	t.Log("ok")
}

func TestMemAnalyze(t *testing.T) {
	data, mongodbErr := NewMongoData()
	if mongodbErr != nil {
		t.Error(mongodbErr)
		return
	}
	analyze := NewMemAnalyst(data)
	uid := "69023059"
	t.Run("TestPrint", func(t *testing.T) {
		analyze.Analyze(uid)
		t.Logf("%+v", analyze.Analysis(uid))
	})
	t.Run("TestJson", func(t *testing.T) {
		analyze.Analyze(uid)
		obj, err := json.Marshal(analyze.Analysis(uid))
		if err != nil {
			t.Error(err)
		}
		t.Logf("%+v", obj)
		var builder strings.Builder
		builder.Write(obj)
		s := builder.String()
		i := 0
		for {
			sub := s[i*20 : (i+1)*20]
			src.Logger.Info(sub)
			i++
		}
	})
}
